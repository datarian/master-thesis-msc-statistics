def _format_zip(self, inplace=True):
    """
    Removes the dash at the end of some zip codes, which separates
    zip and area code. No area codes present in data.
    """
    zip_series = self.processed_data.ZIP.copy()
    zip_series = zip_series.str.replace('-', '').astype('category')
    self.processor_log["format_zip"] = "ZIP"
    if inplace:
        self.processed_data.ZIP = zip_series
        return None
    else:
        return zip_series


def _recode_booleans(self):
    """
    Recodes boolean columns. Specify the codes used in data and the
    affected columns through BooleanRecodeSpec objects.
    BooleanRecodeSpec also considers 0 -> False and 1 -> True mappings
    by default and recodes these values when found.
    Expects a pandas data frame!
    """
    if not isinstance(self.processed_data, pd.DataFrame):
        raise TypeError("Recode booleans: Needs a pandas dataframe.")

    if not all(isinstance(r, BooleanRecodeSpec)
               for r in self.boolean_recode_specs):
        raise TypeError("Expects a list of BooleanRecodeSpec objects.")

    self.processor_log["recoded_booleans"] = []
    for spec in self.boolean_recode_specs:
        spec.ds_ref = self.processed_data  # set reference to acess self.processed_data
        spec.do_recode()
        self.processor_log["recoded_booleans"] += spec.features
    self.processor_log["recoded_booleans"] = list(
        itertools.chain(*self.processor_log["recoded_booleans"]))

    def _process_symbolic_features(self):
        """ Processes the symbolic features specified within this method.

        Params:
        -------
        data: A reference to TidyDataset.processed_data
        """
        if isinstance(self.processed_data, pd.DataFrame):
            # Call handler object's spreader method
            self.processor_log["symbolic_features"] = []
            for f in self.symbolic_features:
                self.processor_log["symbolic_features"].append(f.feature)
                f.set_tidy_dataset_ref(self.processed_data)
                f.spread()
        else:
            raise NameError

    def _remove_missing(self):
        """ Removes features where >= 99,5% are missing values
        """
        nrow = len(self.processed_data.index)
        features = self.processed_data.loc[:,
                                           (self.processed_data.isnull().sum()/nrow >= 0.995)].columns
        self.processor_log["remove_mostly_missing"] = list(features)
        self.processed_data.drop(features, axis=1, inplace=True)
